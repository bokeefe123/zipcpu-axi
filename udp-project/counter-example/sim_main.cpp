// sim_main.cpp
#include "Vcounter.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h" // For waveform tracing (optional)
#include <iostream>

int main(int argc, char **argv) {
  // Initialize Verilated
  Verilated::commandArgs(argc, argv);

  // Instantiate the counter module
  Vcounter *top = new Vcounter;

  // Simulation time variables
  vluint64_t main_time = 0;        // Current simulation time
  const vluint64_t max_time = 100; // Maximum simulation time

  // Initialize trace (VCD) dump
  Verilated::traceEverOn(true);
  VerilatedVcdC *tfp = new VerilatedVcdC;
  top->trace(tfp, 99); // Trace levels of hierarchy
  tfp->open("waveform.vcd");

  // Initialize inputs
  top->clk = 0;
  top->reset_n = 0;

  // Simulation loop
  while (main_time < max_time) {
    // Toggle clock
    if ((main_time % 2) == 0) {
      top->clk = 1;
    } else {
      top->clk = 0;
    }

    // Apply reset for the first 5 time units
    if (main_time < 5) {
      top->reset_n = 0;
    } else {
      top->reset_n = 1;
    }

    // Evaluate the model
    top->eval();

    // Dump trace data
    tfp->dump(main_time);

    // Print counter value on positive clock edge
    if (top->clk && top->reset_n) {
      std::cout << "Time: " << main_time
                << " | Counter Value: " << (int)top->count << std::endl;
    }

    // Advance simulation time
    main_time++;
  }

  // Final model cleanup
  top->final();

  // Close trace file
  tfp->close();

  // Clean up
  delete top;
  delete tfp;

  return 0;
}
